#!/bin/env ruby
# 
# makec.rb is a Ruby wrapper for make to colorize the output of the GCC 
# compiler. 
#
# See README.md or http://github.com/mcbridejc/makec for more information.
#
# This program was derived to suit my own purposes from GilCC, a program
# created by Gilson Motta and released under the MIT license. 
# It can be found here: http://www.onlysolutionssoftware.com/gilcc/
#
# 
# Copyright (C) 2014  Jeff McBride <mcbridejc@gmail.com
# Copyright (C) 2014  Gilson Motta - Only Solutions Software LLC.
#
# Licensed under the MIT
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
	
require 'benchmark'
require 'pty'
require 'makec'

# set the default command line for compiler
# for example:
# "gcc -g0 -d3 myfile.c" - you are calling gcc directly so your default command compiler is just 'gcc'
# "make arg1 arg2 arg3" - you are calling gcc via makefile so your default command compiler is just 'make' 
default_cmd_line_compiler = "make"

# set the default command line here i.e. when you call gilCC without arguments it will
# call your default_cmd_line_compiler and pass the arguments below.
default_cmd_line_args = ""

cmd_line = ""

# build command line based on command line input or just use the default
if( ARGV.size>0 )
	ARGV.each do|a|
	  cmd_line = cmd_line + a + " "
	end
	cmd_line = default_cmd_line_compiler + " " + cmd_line
else
	cmd_line = default_cmd_line_compiler + " " + default_cmd_line_args
end

# show the command line to the user
puts
puts cmd_line.magenta

time = Benchmark.realtime{
	PTY.spawn(cmd_line + " 2>&1") do |stdin, stdout, pid|
		begin
			stdin.each { |line|
			  MakeC::Colorizer.puts_with_color(line)
			}
		rescue PTY::ChildExited, Errno::EIO
		  # ChildExited should be pretty self explanatory
		  # I sometimes get Errno::EIO first, but it seems to always happen
		  # after the process is finished, and not actually be an error
		end
	end
}

# show our statistics to the user
$no_of_warnings = MakeC::Config.category("warning") ? MakeC::Config.category("warning").match_count : "N/A"
$no_of_errors = MakeC::Config.category("error") ? MakeC::Config.category("error").match_count : "N/A"
puts
puts " Build Statistics".cyan.swap + (" " * (" Compile time: #{time} seconds".length - " Build Statistics".length)).cyan.swap
puts (" Warnings: " + $no_of_warnings.to_s + (" " * (" Compile time: #{time} seconds".length - " Warnings: ".length -  $no_of_warnings.to_s.length))).cyan.swap
puts (" Errors: " + $no_of_errors.to_s + (" " * (" Compile time: #{time} seconds".length - " Errors: ".length -  $no_of_errors.to_s.length))).cyan.swap
puts " Compile time: #{time} seconds".cyan.swap

